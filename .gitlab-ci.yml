stages:
  - setup
  - restore
  - build
  - deploy

variables:
  CI_BASEVER: 0.0.0

setup:
  stage: setup
  tags:
    - linux
    - docker
  image: bash:latest
  script:
    - |
      NOW=$(date +"%Y%m%d")
      echo "CI_ASMVER=$CI_BASEVER.$NOW" >> build.env
      if [[ -n $CI_COMMIT_TAG ]]; then
        echo "CI_SEMVER=$CI_BASEVER" >> build.env
      else
        BRANCHNAME=$(echo "$CI_COMMIT_BRANCH" | sed "s/\//-/g")
        echo "CI_SEMVER=$CI_BASEVER-$BRANCHNAME-$CI_BUILD_ID" >> build.env
      fi
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 week

build:
  stage: build
  tags:
    - windows
    - dotnet
    - powershell
  before_script:
    - dotnet nuget add source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
  script:
    - echo "Version is $env:CI_ASMVER $env:CI_SEMVER"
    - dotnet restore Faelyn.sln
    - dotnet build Faelyn.sln --no-restore -c Release "/p:Version=$($env:CI_ASMVER)" "/p:InformationalVersion=$($env:CI_SEMVER)" "/p:PackageVersion=$($env:CI_SEMVER)"
  after_script:
    - dotnet nuget remove source gitlab
  artifacts:
    paths:
      - Build/tmp/packages
    expire_in: 1 week
  needs:
    - job: setup
      artifacts: true
    
deploy:
  stage: deploy
  tags:
    - linux
    - docker
  image: mcr.microsoft.com/dotnet/sdk:5.0-alpine3.12
  before_script:
    - dotnet nuget add source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
  script:
    - dotnet nuget push "Build/tmp/packages/*.nupkg" --source gitlab
    - dotnet nuget push "Build/tmp/packages/*.snupkg" --source gitlab
  after_script:
    - dotnet nuget remove source gitlab
  needs:
    - job: setup
      artifacts: true
    - job: build
      artifacts: true