stages:
  - version
  - restore
  - build
  - deploy
  - release

job_version:
  stage: version
  tags:
    - docker
  image: mcr.microsoft.com/dotnet/sdk:5.0-alpine
  before_script:
    - 'which ssh-agent || ( apk add --update --no-cache openssh )'
    - eval "$(ssh-agent -s)"
    - | 
      GIT_SSH_PRIVATE_KEY="-----BEGIN OPENSSH PRIVATE KEY-----
      $GIT_SSH_PRIVATE_KEY1
      $GIT_SSH_PRIVATE_KEY2
      $GIT_SSH_PRIVATE_KEY3
      $GIT_SSH_PRIVATE_KEY4
      $GIT_SSH_PRIVATE_KEY5
      -----END OPENSSH PRIVATE KEY-----"
    - echo "$GIT_SSH_PRIVATE_KEY" | ssh-add -
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - mkdir -p ~/.ssh
    - GIT_SSH_PUBLIC_KEY_CRYPTO_DECODED=$(eval "echo ${GIT_SSH_PUBLIC_KEY_CRYPTO} | base64 -d")
    - echo "${CI_SERVER_HOST} ${GIT_SSH_PUBLIC_KEY_CRYPTO_DECODED} ${GIT_SSH_PUBLIC_KEY_DATA}" >> ~/.ssh/known_hosts
  script:
    - pwsh -f ./Build/scripts/Define-Version.ps1 --% -bid "${CI_COMMIT_BRANCH}" -tid "${CI_COMMIT_TAG}" -mid "${CI_MERGE_REQUEST_ID}" -cid "${CI_COMMIT_SHORT_SHA}" -buildCounter "${CI_PIPELINE_ID}" -envFile "build.env"
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 week

job_build:
  stage: build
  tags:
    - windows
    - dotnet
    - powershell
  before_script:
    - echo "Version is $env:CI_STANDARD_VER $env:CI_SEMAMTIC_VER"
    - dotnet nuget add source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
  script:
    - dotnet restore Faelyn.sln
    - dotnet build Faelyn.sln --no-restore -c Release "/p:Version=$($env:CI_STANDARD_VER)" "/p:InformationalVersion=$($env:CI_SEMAMTIC_VER)" "/p:PackageVersion=$($env:CI_SEMAMTIC_VER)"
  after_script:
    - dotnet nuget remove source gitlab
  artifacts:
    paths:
      - Build/packages/output
    expire_in: 1 week
  needs:
    - job: job_version
      artifacts: true

job_deploy:
  stage: deploy
  tags:
    - docker
  image: mcr.microsoft.com/dotnet/sdk:5.0-alpine3.12
  before_script:
    - echo "Version is $env:CI_STANDARD_VER $env:CI_SEMAMTIC_VER"
    - dotnet nuget add source "$CI_SERVER_URL/api/v4/projects/$CI_PROJECT_ID/packages/nuget/index.json" --name gitlab --username gitlab-ci-token --password $CI_JOB_TOKEN --store-password-in-clear-text
  script:
    - dotnet nuget push "Build/packages/output/*.nupkg" --source gitlab
    - dotnet nuget push "Build/packages/output/*.snupkg" --source gitlab
  after_script:
    - dotnet nuget remove source gitlab
  needs:
    - job: job_version
      artifacts: true
    - job: job_build
      artifacts: true

job_release_branch:
  stage: release
  tags:
    - docker
  image: mcr.microsoft.com/dotnet/sdk:5.0-alpine
  rules:
    - if: $CI_COMMIT_TAG
  before_script:
    - 'which ssh-agent || ( apk add --update --no-cache openssh )'
    - eval "$(ssh-agent -s)"
    - |  
      GIT_SSH_PRIVATE_KEY="-----BEGIN OPENSSH PRIVATE KEY-----
      $GIT_SSH_PRIVATE_KEY1
      $GIT_SSH_PRIVATE_KEY2
      $GIT_SSH_PRIVATE_KEY3
      $GIT_SSH_PRIVATE_KEY4
      $GIT_SSH_PRIVATE_KEY5
      -----END OPENSSH PRIVATE KEY-----"
    - echo "$GIT_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - mkdir -p ~/.ssh
    - GIT_SSH_PUBLIC_KEY_CRYPTO_DECODED=$(eval "echo ${GIT_SSH_PUBLIC_KEY_CRYPTO} | base64 -d")
    - echo "${CI_SERVER_HOST} ${GIT_SSH_PUBLIC_KEY_CRYPTO_DECODED} ${GIT_SSH_PUBLIC_KEY_DATA}" >> ~/.ssh/known_hosts
  script:
    - pwsh -f ./Build/scripts/Branch-Release.ps1 --% "${CI_COMMIT_TAG}"


